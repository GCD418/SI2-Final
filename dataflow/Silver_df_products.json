{
	"name": "Silver_df_products",
	"properties": {
		"folder": {
			"name": "SILVER"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bronze_sql_productos",
						"type": "DatasetReference"
					},
					"name": "producto"
				},
				{
					"dataset": {
						"referenceName": "bronze_sql_productos_cat_mant",
						"type": "DatasetReference"
					},
					"name": "catMant"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Silver_products",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "cast1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          product_key as string,",
				"          category_key as string,",
				"          product_name as string,",
				"          cost as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT SUBSTRING(prd_key, 7) AS product_key,\\nSUBSTRING(prd_key, 0, 6) AS category_key,\\nprd_nm AS product_name,\\nprd_cost AS cost\\nFROM BRONZE.Productos',",
				"     format: 'query') ~> producto",
				"source(output(",
				"          category_key as string,",
				"          category as string,",
				"          sub_category as string,",
				"          maintenance as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT ID AS category_key,\\nCAT AS category,\\nSUBCAT AS sub_category,\\nMAINTENANCE AS maintenance\\nFROM BRONZE.Productos_Cat_Mant',",
				"     format: 'query') ~> catMant",
				"catMant derive(category_key = replace(category_key, '_', '-')) ~> derivedColumn1",
				"sort1 aggregate(groupBy(product_key),",
				"     each(match(name != 'product_key'), $$ = last($$))) ~> aggregate1",
				"producto sort(asc(product_key, true)) ~> sort1",
				"cast1, derivedColumn1 join(aggregate1@category_key == derivedColumn1@category_key,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          product_key,",
				"          product_name,",
				"          cost,",
				"          category,",
				"          sub_category,",
				"          maintenance",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"aggregate1 cast(output(",
				"          cost as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          product_key as string,",
				"          cost as integer,",
				"          category as string,",
				"          sub_category as string,",
				"          product_name as string,",
				"          maintenance as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          product_key,",
				"          cost,",
				"          category,",
				"          sub_category,",
				"          product_name,",
				"          maintenance",
				"     )) ~> sink1"
			]
		}
	}
}