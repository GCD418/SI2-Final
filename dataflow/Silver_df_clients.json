{
	"name": "Silver_df_clients",
	"properties": {
		"folder": {
			"name": "SILVER"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bronze_sql_clientes",
						"type": "DatasetReference"
					},
					"name": "clientes"
				},
				{
					"dataset": {
						"referenceName": "bronze_sql_clientes_bd_gen",
						"type": "DatasetReference"
					},
					"name": "clientesBdGen"
				},
				{
					"dataset": {
						"referenceName": "bronze_sql_clientes_location",
						"type": "DatasetReference"
					},
					"name": "clientesLocation"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Silver_clients",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "explainMaritalStatus"
				},
				{
					"name": "unifyId"
				},
				{
					"name": "unifyClientId"
				},
				{
					"name": "cast1"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          client_id as string,",
				"          firstname as string,",
				"          lastname as string,",
				"          marital_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT cst_id AS client_id,\\ncst_firstname AS firstname,\\ncst_lastname AS lastname,\\ncst_marital_status AS marital_status\\nFROM BRONZE.Clientes',",
				"     format: 'query') ~> clientes",
				"source(output(",
				"          client_id as string,",
				"          birth_date as string,",
				"          gender as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT CID AS client_id,\\nBDATE AS birth_date,\\nGEN AS gender\\nFROM BRONZE.Clientes_BD_GEN',",
				"     format: 'query') ~> clientesBdGen",
				"source(output(",
				"          client_id as string,",
				"          location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT CID AS client_id,\\nCNTRY AS location\\nFROM BRONZE.Clientes_location',",
				"     format: 'query') ~> clientesLocation",
				"clientes derive(marital_status = iif(isNull(marital_status) || marital_status == '', 'unknown',",
				"    iif(marital_status == 'M', 'married',",
				"        iif(marital_status == 'S', 'single', marital_status)",
				"    )",
				"),",
				"          firstname = trim(firstname),",
				"          lastname = trim(lastname)) ~> explainMaritalStatus",
				"clientesBdGen derive(client_id = right(client_id, 5)) ~> unifyId",
				"clientesLocation derive(client_id = right(client_id, 5),",
				"          location = iif(isNull(location) || trim(location) == '', 'unknown',",
				"    iif(location == 'US' || location == 'USA', 'United States',",
				"        iif(location == 'DE', 'Germany', location)",
				"    )",
				")) ~> unifyClientId",
				"unifyId cast(output(",
				"          birth_date as date 'yyyy-MM-dd'",
				"     ),",
				"     errors: true) ~> cast1",
				"aggregate1, cast1 join(aggregate1@client_id == unifyId@client_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, unifyClientId join(aggregate1@client_id == unifyClientId@client_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          client_id = aggregate1@client_id,",
				"          firstname,",
				"          lastname,",
				"          marital_status,",
				"          birth_date,",
				"          gender,",
				"          location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"explainMaritalStatus sort(asc(client_id, true)) ~> sort1",
				"sort1 aggregate(groupBy(client_id),",
				"     each(match(name != 'client_id'), $$ = last($$))) ~> aggregate1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          client_id as string,",
				"          firstname as string,",
				"          lastname as string,",
				"          marital_status as string,",
				"          gender as string,",
				"          birth_date as date,",
				"          location as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          client_id,",
				"          firstname,",
				"          lastname,",
				"          marital_status,",
				"          gender,",
				"          birth_date,",
				"          location",
				"     )) ~> sink1"
			]
		}
	}
}